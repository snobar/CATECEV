@using CATECEV.FE.Models.ViewModels
@model PartnerPaymentPageViewModel

@section Scripts {


    <script>
                $(document).ready(function () {
            var table = $('#transactionsTable').DataTable({
            pageLength: 25,
            order: [[0, 'desc']],
            dom: 'lrtip',
            responsive: true,
            autoWidth: false
        });

        // Add custom filter for date range
        $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
            var start = $('#dateRange').data('start');
            var end = $('#dateRange').data('end');
            var date = data[0]; // date column

            if (!start || !end) return true;
            return date >= start && date <= end;
        });

        // Initialize daterangepicker
        $('#dateRange').daterangepicker({
            autoUpdateInput: false,
            locale: {
                cancelLabel: 'Clear',
                format: 'YYYY-MM-DD'
            }
        });

        $('#dateRange').on('apply.daterangepicker', function (ev, picker) {
            var start = picker.startDate.format('YYYY-MM-DD');
            var end = picker.endDate.format('YYYY-MM-DD');
            $(this).val(`${start} - ${end}`);
            $(this).data('start', start);
            $(this).data('end', end);
            table.draw();
        });

        $('#dateRange').on('cancel.daterangepicker', function () {
            $(this).val('');
            $(this).data('start', null);
            $(this).data('end', null);
            table.draw();
        });

        });
        $(function () {
              $('#paymentForm').submit(function (e) {
            e.preventDefault();


            $('.text-danger').text(''); // clear previous errors

            const amount = parseFloat($('#NewPayment_PaymentAmount').val());

            if (isNaN(amount) || amount === 0) {
                $('#amountValidationMsg').text('Payment amount must be greater than zero.');
                return;
            }
        $('#pageOverlay').removeClass('overlay-hidden');
                    $.ajax({
                url: '@Url.Action("Manage", "Data")',
                type: 'POST',
                data: $(this).serialize(),
                     success: function (res) {
        $('#pageOverlay').addClass('overlay-hidden');
                    if (res.success) {
         location.reload();
            } else {
                res.errors.forEach(function (msg, i) {
                    $(`.field-validation-error:eq(${i})`).text(msg);
                });
            }
        }
            });
        });

        });

        $('#refreshBalanceBtn').click(function () {
            var $icon = $(this).find('i');
            $icon.addClass('fa-spin');
            $('#refreshSuccessMsg').hide();

            $.ajax({
                url: '@Url.Action("RefreshBalance", "Data")',
                type: 'GET',
                data: { id: '@Model.NewPayment.PartnerId' },
                success: function (res) {
                    $icon.removeClass('fa-spin');
                    if (res.success) {
                        $('#balanceAmountText').text(res.newBalance);
                        $('#refreshSuccessMsg').fadeIn().delay(2000).fadeOut(); // show for 2s
                        location.reload();

                    } else {
                        alert("Failed to refresh balance.");
                    }
                },
                error: function () {
                    $icon.removeClass('fa-spin');
                    alert("Error contacting server.");
                }
            });
        });

            $('#sendEmailBtn').click(function () {
            var $icon = $(this).find('i');
            $icon.addClass('fa-spin');
            $('#emailSuccessMsg').hide();

            $.ajax({
                url: '@Url.Action("SendBalanceEmail", "Data")',
                type: 'POST',
                data: { id: '@Model.NewPayment.PartnerId' },
                success: function (res) {
                    $icon.removeClass('fa-spin');
                    if (res.success) {
                        $('#emailSuccessMsg').fadeIn().delay(2000).fadeOut();
                    } else {
                        alert("Failed to send email.");
                    }
                },
                error: function () {
                    $icon.removeClass('fa-spin');
                    alert("Error contacting server.");
                }
            });
        });
        
              function deletePayment(paymentId) {
            if (!confirm('Are you sure you want to delete this payment?')) return;
        $('#pageOverlay').removeClass('overlay-hidden');

            $.ajax({
                url: '@Url.Action("DeletePayment", "Data")',
                type: 'POST',
                data: { paymentId: paymentId },
                success: function (result) {
                    $('#pageOverlay').addClass('overlay-hidden');

                    if (result.success) {
                   location.reload();
                    } else {
                        alert('Failed to delete payment.');
                    }
                },
                error: function () {
                    alert('An error occurred while deleting the payment.');
                }
            });
        }
    </script>
}

<style>
    body {
        font-size: 12px;
    }

    table, table th, table td,
    form, form label, form input,
    .btn {
        font-size: 12px !important;
    }


    #dateRange {
        font-size: 12px;
        padding: 4px 8px;
        height: 34px;
    }

    .daterangepicker {
        font-size: 12px !important;
    }

        .daterangepicker .calendar-table {
            font-size: 12px !important;
        }

        .daterangepicker .ranges li {
            padding: 4px 6px !important;
        }

</style>
<div class="mb-3">
    <a asp-action="Index" asp-controller="Data" class="btn btn-secondary">
        ← Back to Partner List
    </a>
</div>

@if (Model.SelectedPartner != null)
{
    <div class="mb-4 border p-3 rounded bg-white pt-4">

        <form asp-action="UpdatePartnerBalance" method="post" class="row g-3">
            @* Hidden Partner ID *@
            <input type="hidden" name="Id" value="@Model.SelectedPartner.Id" />

            <dl class="row mb-0">
                <dt class="col-sm-3">Name</dt>
                <dd class="col-sm-9">@Model.SelectedPartner.Name</dd>

                <dt class="col-sm-3">Reg No</dt>
                <dd class="col-sm-9">@Model.SelectedPartner.RegNo</dd>

                <dt class="col-sm-3">Balance Amount</dt>
                <dd class="col-sm-9">
                    <div class="d-flex align-items-center">
                        <input type="number" step="0.01" name="BalanceAmount" class="form-control form-control-sm w-auto" value="@Model.SelectedPartner.BalanceAmount" />

                        <button id="refreshBalanceBtn" class="btn btn-outline-secondary btn-sm ms-2" type="button" title="Refresh Amount Balance">
                            <i class="fas fa-sync-alt"></i>
                        </button>

                        <button id="sendEmailBtn" class="btn btn-outline-primary btn-sm ms-2" type="button" title="Send Balance Email">
                            <i class="fas fa-envelope"></i>
                        </button>

                        <span id="refreshSuccessMsg" class="ms-2 text-success fw-bold" style="display:none;">✔ Refreshed</span>
                        <span id="emailSuccessMsg" class="ms-2 text-success fw-bold" style="display:none;">📧 Sent</span>
                    </div>
                </dd>

                <dt class="col-sm-3">As of</dt>
                <dd class="col-sm-9">
                    <input type="date" name="LastCalculationBalanceDate" class="form-control form-control-sm w-auto"
                           value="@Model.SelectedPartner.LastCalculationBalanceDate?.ToString("yyyy-MM-dd")" />
                </dd>
                <dt class="col-sm-3">Email</dt>
                <dd class="col-sm-9">
                    <input type="email" name="Email" class="form-control form-control-sm w-auto" value="@Model.SelectedPartner.Email" />
                </dd>

                <dt class="col-sm-3">Mobile</dt>
                <dd class="col-sm-9">
                    <input type="tel" name="Mobile" class="form-control form-control-sm w-auto" value="@Model.SelectedPartner.Mobile" />
                </dd>
                <dt class="col-sm-3">Total Balance Amount</dt>
                <dd class="col-sm-9">
                    <input type="tel" name="InitialBalanceAmount" class="form-control form-control-sm w-auto" value="@Model.SelectedPartner.TotalBalanceAmount" />
                </dd>

            </dl>

            <div class="d-flex justify-content-end mt-3">
                <button type="submit" class="btn btn-success btn-sm">Update Info</button>
            </div>
            @if (TempData["SuccessMsg"] != null)
            {
                <div class="alert alert-success">@TempData["SuccessMsg"]</div>
            }
        </form>
    </div>
}

<ul class="nav nav-tabs" id="infoTabs" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link active" id="payments-tab" data-bs-toggle="tab" data-bs-target="#payments" type="button" role="tab">Payments</button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="balance-tab" data-bs-toggle="tab" data-bs-target="#balance" type="button" role="tab">Transactions</button>
    </li>

</ul>

<div class="tab-content mt-3" id="infoTabsContent">
    <!-- Payments Tab -->
    <div class="tab-pane fade  show active" id="payments" role="tabpanel" aria-labelledby="payments-tab">

        @using (Html.BeginForm("Manage", "Data", FormMethod.Post, new { @id = "paymentForm", @class = "d-flex flex-wrap align-items-end gap-2 mb-4" }))
        {
            @Html.HiddenFor(m => m.NewPayment.PartnerId)

            <div>
                @Html.LabelFor(m => m.NewPayment.PaymentAmount, "Payment Amount", new { @class = "form-label" })
                @Html.TextBoxFor(m => m.NewPayment.PaymentAmount, new { @class = "form-control", type = "number", step = "0.01" })
                <span class="text-danger" id="amountValidationMsg"></span>

            </div>
            <div>
                @Html.LabelFor(m => m.NewPayment.PaymentDate, "Payment Date", new { @class = "form-label" })
                @Html.TextBoxFor(m => m.NewPayment.PaymentDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
            </div>
            <div>
                <label class="form-label d-block">&nbsp;</label>
                <button type="submit" class="btn btn-primary">Add</button>
            </div>
        }

        <hr />
        @if (Model.PartnerPayments?.Any() == true)
        {
            <table class="table table-sm table-striped">
                <thead>
                    <tr>
                        <th>Payment Date</th>
                        <th>Payment Amount</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var payment in Model.PartnerPayments)
                    {
                        <tr id="row-@payment.Id">
                            <td>@payment.PaymentDate.ToString("yyyy-MM-dd")</td>
                            <td>@payment.PaymentAmount</td>
                            <td>
                                <button type="button"
                                        class="btn btn-sm btn-danger"
                                        onclick="deletePayment(@payment.Id)">
                                    Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No payments found.</p>
        }
    </div>
    <!-- Balance Tab -->
    <div class="tab-pane fade" id="balance" role="tabpanel" aria-labelledby="balance-tab">
        @* Existing balance/partner info UI *@
        <h6>Transactions Basket</h6>
        @if (Model.PartnerExpenses?.Any() == true)
        {
            <div class="row mb-3">
                <div class="col-md-4">
                    <label for="dateRange" class="form-label">Filter by Date Range</label>
                    <input type="text" id="dateRange" class="form-control form-control-sm w-100" placeholder="Select date range" />
                </div>
            </div>
            <div class="table-responsive">
                <table id="transactionsTable" class="table table-sm table-bordered w-100">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Charge Point</th>
                            <th>Duration</th>
                            <th>Total (Excl. Tax)</th>
                            <th>Currency</th>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.PartnerExpenses)
                        {
                            <tr>
                                <td>@item.Date.ToString("yyyy-MM-dd")</td>
                                <td>@item.ChargePointName</td>
                                <td>@item.Duration</td>
                                <td>@item.TotalAmount.WithoutTax</td>
                                <td>@item.CurrencyCode</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p>No basket data found.</p>
        }
    </div>


</div>




